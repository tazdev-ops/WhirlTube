diff --git a/src/whirltube/dialogs.py b/src/whirltube/dialogs.py
index f2bc28e..5e1ce59 100644
--- a/src/whirltube/dialogs.py
+++ b/src/whirltube/dialogs.py
 @@ -1,6 +1,5 @@
 from __future__ import annotations
 
-import shlex
 from dataclasses import dataclass
 from pathlib import Path
+import shlex
 
 import gi
 
 @@ -160,21 +159,31 @@ class DownloadOptionsWindow(Adw.Window):
         # Format selection (with fetch button)
         format_group = Adw.PreferencesGroup(title="Formats")
         main_box.append(format_group)
 
         format_row = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=6)
-        self.format_combo = Gtk.DropDown.new_from_strings(["Select a format..."])
+        self.format_combo = Gtk.DropDown.new_from_strings(["Select a format..."])
+        # Disabled until formats are fetched
+        self.format_combo.set_sensitive(False)
         format_row.append(self.format_combo)
         self.btn_fetch = Gtk.Button(label="Fetch formats")
         format_row.append(self.btn_fetch)
-        self._format_action = Adw.ActionRow()
-        self._format_action.set_title("Available formats")
-        self._format_action.set_child(format_row)
-        # Hide the format picker until formats are fetched
-        self._format_action.set_visible(False)
-        format_group.add(self._format_action)
+        # Inline spinner + status for fetch
+        self._fmt_spinner = Gtk.Spinner()
+        self._fmt_spinner.set_visible(False)
+        format_row.append(self._fmt_spinner)
+        self._fmt_status = Gtk.Label(label="", xalign=0.0)
+        self._fmt_status.add_css_class("dim-label")
+        format_row.append(self._fmt_status)
+        format_action = Adw.ActionRow()
+        format_action.set_title("Available formats")
+        format_action.set_child(format_row)
+        format_group.add(format_action)
 
         # When user selects a specific format, force Quality to "Custom" for clarity
         self.format_combo.connect("notify::selected", self._on_format_selected)
 
         # Target directory
         dir_group = Adw.PreferencesGroup(title="Destination")
         main_box.append(dir_group)
 @@ -218,6 +227,7 @@ class DownloadOptionsWindow(Adw.Window):
         self._accepted = False
         self._selected_format_id = None
         self._format_map: dict[str, str] = {}
         # Wire cookies sensitivity
         self._wire_cookies_sensitive()
+        # End of constructor
 
     def _on_quality_mode_changed(self, combo: Adw.ComboRow, _pspec) -> None:
         is_custom = combo.get_selected() == 2  # "Custom" option
         self.custom_format_row.set_visible(is_custom)
 
 @@ -229,6 +239,22 @@ class DownloadOptionsWindow(Adw.Window):
         self._accepted = True
         self.destroy()
 
+    # --- Formats fetch UX helpers ---
+    def begin_format_fetch(self) -> None:
+        try:
+            self.btn_fetch.set_sensitive(False)
+        except Exception:
+            pass
+        self._fmt_status.set_text("Fetching formatsâ€¦")
+        self._fmt_spinner.set_visible(True)
+        try:
+            self._fmt_spinner.start()
+        except Exception:
+            pass
+
+    def _end_format_fetch(self) -> None:
+        try:
+            self._fmt_spinner.stop()
+        except Exception:
+            pass
+        self._fmt_spinner.set_visible(False)
+        self._fmt_status.set_text("")
+        try:
+            self.btn_fetch.set_sensitive(True)
+        except Exception:
+            pass
+
     # --- Cookies enable/disable wiring ---
     def _wire_cookies_sensitive(self) -> None:
         def _apply_sensitive() -> None:
             on = self.use_cookies.get_active()
             self.cookies_browser.set_sensitive(on)
 @@ -287,19 +313,22 @@ class DownloadOptionsWindow(Adw.Window):
         return True, opts
 
     def set_formats(self, formats: list[tuple[str, str]]) -> None:
         """Update the format dropdown with available formats."""
-        if not formats:
-            # Keep hidden if nothing fetched/available
-            self._format_action.set_visible(False)
-            return
-        
+        # Always end fetch UI state on return to main loop
+        self._end_format_fetch()
+        if not formats:
+            # Keep dropdown disabled if nothing available
+            self.format_combo.set_sensitive(False)
+            # Reset model just in case
+            self.format_combo.set_model(Gtk.StringList.new(["Select a format..."]))
+            return
+
         # Create new model with "Select a format..." as first option
         strings = ["Select a format..."] + [f"{fmt_id}: {fmt_label}" for fmt_id, fmt_label in formats]
         model = Gtk.StringList.new(strings)
         self.format_combo.set_model(model)
-        # Reveal the row now that we have content
-        self._format_action.set_visible(True)
+        # Enable dropdown now that we have content
+        self.format_combo.set_sensitive(True)
 
         # Store the mapping
         self._format_map = {f"{fmt_id}: {fmt_label}": fmt_id for fmt_id, fmt_label in formats}
diff --git a/src/whirltube/search_filters.py b/src/whirltube/search_filters.py
new file mode 100644
index 0000000..7bdbd2f
--- /dev/null
+++ b/src/whirltube/search_filters.py
 @@ -0,0 +1,20 @@
+from __future__ import annotations
+
+from typing import Any, Tuple
+
+
+def normalize_search_filters(settings: dict[str, Any]) -> tuple[str | None, str | None, str | None]:
+    """
+    Convert persisted settings to provider-friendly values:
+      - order: 'relevance' -> None else 'date'|'views'
+      - duration: 'any' -> None else 'short'|'medium'|'long'
+      - period: 'any' -> None else 'today'|'week'|'month'
+    Returns (order, duration, period)
+    """
+    ordv = str(settings.get("search_order", "relevance") or "relevance").strip().lower()
+    durv = str(settings.get("search_duration", "any") or "any").strip().lower()
+    perv = str(settings.get("search_period", "any") or "any").strip().lower()
+
+    order = None if ordv == "relevance" else ordv
+    duration = None if durv == "any" else durv
+    period = None if perv == "any" else perv
+    return order, duration, period
diff --git a/src/whirltube/window.py b/src/whirltube/window.py
index 4f1b9de..4cf28f8 100644
--- a/src/whirltube/window.py
+++ b/src/whirltube/window.py
 @@ -31,6 +31,7 @@ from .player import has_mpv, start_mpv, mpv_send_cmd
 from .provider import YTDLPProvider
 from .invidious_provider import InvidiousProvider
 from .download_manager import DownloadManager
+from .search_filters import normalize_search_filters
 from .navigation_controller import NavigationController
 from .download_history import list_downloads
 from .subscriptions import is_followed, add_subscription, remove_subscription, list_subscriptions, export_subscriptions, import_subscriptions
 @@ -240,13 +241,8 @@ class MainWindow(Adw.ApplicationWindow):
 
         def worker() -> None:
             try:
-                # Extract filters from settings
-                order = (self.settings.get("search_order") or "relevance")
-                duration = (self.settings.get("search_duration") or "any")
-                period = (self.settings.get("search_period") or "any")
-                # Normalize "any" to None
-                order = None if str(order).lower() == "relevance" else order
-                duration = None if str(duration).lower() == "any" else duration
-                period = None if str(period).lower() == "any" else period
+                # Normalize filters from settings to provider-friendly form
+                order, duration, period = normalize_search_filters(self.settings)
                 results = self.provider.search(query, limit=30, order=order, duration=duration, period=period)
             except Exception as e:
                 log.exception("Search failed")
                 GLib.idle_add(self._show_error, f"Search failed: {e}")
 @@ -495,10 +491,12 @@ class MainWindow(Adw.ApplicationWindow):
         dlg = DownloadOptionsWindow(self, video.title)
 
         def fetch_formats(_btn):
+            dlg.begin_format_fetch()
             def worker() -> None:
                 try:
                     fmts = self.provider.fetch_formats(video.url)
                 except Exception:
                     fmts = []
                 GLib.idle_add(dlg.set_formats, fmts)
 
         dlg.btn_fetch.connect("clicked", fetch_formats)
         dlg.present()
diff --git a/tests/test_search_filters.py b/tests/test_search_filters.py
new file mode 100644
index 0000000..d7b74a7
--- /dev/null
+++ b/tests/test_search_filters.py
 @@ -0,0 +1,36 @@
+from whirltube.search_filters import normalize_search_filters
+
+
+def test_normalize_defaults_to_none():
+    s = {}
+    order, duration, period = normalize_search_filters(s)
+    assert order is None and duration is None and period is None
+
+
+def test_normalize_any_and_relevance_become_none():
+    s = {
+        "search_order": "relevance",
+        "search_duration": "any",
+        "search_period": "any",
+    }
+    order, duration, period = normalize_search_filters(s)
+    assert order is None and duration is None and period is None
+
+
+def test_normalize_respects_values_case_insensitive():
+    s = {
+        "search_order": "DATE",
+        "search_duration": "Short",
+        "search_period": "Week",
+    }
+    order, duration, period = normalize_search_filters(s)
+    assert order == "date" and duration == "short" and period == "week"
+
+
+def test_normalize_passes_through_known_values():
+    s = {
+        "search_order": "views",
+        "search_duration": "long",
+        "search_period": "month",
+    }
+    assert normalize_search_filters(s) == ("views", "long", "month")
PATCH