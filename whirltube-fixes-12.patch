diff --git a/src/whirltube/window.py b/src/whirltube/window.py
index 28e22b9..3b4c309 100644
--- a/src/whirltube/window.py
+++ b/src/whirltube/window.py
@@ -96,6 +96,7 @@ class MainWindow(Adw.ApplicationWindow):
         menu.append("Download History", "win.download_history")
         menu.append("Cancel All Downloads", "win.cancel_all_downloads")
         menu.append("Clear Finished Downloads", "win.clear_finished_downloads")
+        menu.append("Copy URL @ time", "win.mpv_copy_ts")
         menu.append("Stop MPV", "win.stop_mpv")
         menu.append("Quit", "app.quit")
         menu_btn = Gtk.MenuButton(icon_name="open-menu-symbolic")
         menu_btn.set_menu_model(menu)
         header.pack_start(menu_btn)
@@ -126,8 +127,11 @@ class MainWindow(Adw.ApplicationWindow):
         self.toolbar_view.add_top_bar(header)
 
         # MPV control bar (hidden by default; shown for external MPV)
         self.ctrl_bar = Adw.HeaderBar()
         self.ctrl_bar.set_title_widget(Gtk.Label(label="MPV Controls", css_classes=["dim-label"]))
+        # Toast overlay wrappers the whole UI
+        self.toast_overlay = Adw.ToastOverlay()
+        self.set_content(self.toast_overlay)
         # Buttons: Seek -10, Play/Pause, Seek +10, Speed -, Speed +, Stop
         self.btn_seek_back = Gtk.Button(icon_name="media-seek-backward-symbolic")
         self.btn_play_pause = Gtk.Button(icon_name="media-playback-pause-symbolic")
         self.btn_seek_fwd = Gtk.Button(icon_name="media-seek-forward-symbolic")
         self.btn_speed_down = Gtk.Button(label="Speed -")
@@ -136,12 +140,16 @@ class MainWindow(Adw.ApplicationWindow):
         self.btn_seek_back.connect("clicked", lambda *_: self._mpv_seek(-10))
         self.btn_play_pause.connect("clicked", lambda *_: self._mpv_cycle_pause())
         self.btn_seek_fwd.connect("clicked", lambda *_: self._mpv_seek(10))
         self.btn_speed_down.connect("clicked", lambda *_: self._mpv_speed_delta(-0.1))
         self.btn_speed_up.connect("clicked", lambda *_: self._mpv_speed_delta(0.1))
+        self.btn_copy_ts = Gtk.Button(icon_name="edit-copy-symbolic")
+        self.btn_copy_ts.set_tooltip_text("Copy URL at current time (T)")
+        self.btn_copy_ts.connect("clicked", lambda *_: self._mpv_copy_ts())
         self.btn_stop_mpv = Gtk.Button(icon_name="media-playback-stop-symbolic")
         self.btn_stop_mpv.connect("clicked", lambda *_: self._mpv_stop())
         # Pack controls on the right
         self.ctrl_bar.pack_end(self.btn_stop_mpv)
+        self.ctrl_bar.pack_end(self.btn_copy_ts)
         self.ctrl_bar.pack_end(self.btn_speed_up)
         self.ctrl_bar.pack_end(self.btn_speed_down)
         self.ctrl_bar.pack_end(self.btn_seek_fwd)
         self.ctrl_bar.pack_end(self.btn_play_pause)
         self.ctrl_bar.pack_end(self.btn_seek_back)
@@ -184,7 +192,9 @@ class MainWindow(Adw.ApplicationWindow):
         self.stack.add_titled(self.player_box, "player", "Player")
 
-        self.toolbar_view.set_content(self.stack)
+        # Place ToolbarView inside the ToastOverlay
+        self.toast_overlay.set_child(self.toolbar_view)
+        self.toolbar_view.set_content(self.stack)
 
         # Navigation controller (handles back button)
         self.navigation_controller = NavigationController(self.stack, self.btn_back)
@@ -192,7 +202,8 @@ class MainWindow(Adw.ApplicationWindow):
         self.download_manager = DownloadManager(
             downloads_box=self.downloads_box,
             show_downloads_view=lambda: self.navigation_controller.show_view("downloads"),
             get_setting=self.settings.get,
-            show_error=self._show_error,
+            show_error=self._show_error,
+            show_toast=self._show_toast,
         )
         self.download_manager.set_download_dir(self.download_dir)
         self.download_manager.set_max_concurrent(int(self.settings.get("max_concurrent_downloads") or 3))
@@ -213,6 +224,15 @@ class MainWindow(Adw.ApplicationWindow):
         self._mpv_ipc = None
         self._mpv_speed = 1.0
 
+        # Track current URL for timestamp copying
+        self._mpv_current_url: str | None = None
+
         # Save settings on window close
         self.connect("close-request", self._on_main_close)
 
+    def _show_toast(self, text: str) -> None:
+        try:
+            self.toast_overlay.add_toast(Adw.Toast.new(text))
+        except Exception:
+            pass
+
     def _install_mpv_actions(self) -> None:
         # Define actions
         a_play_pause = Gio.SimpleAction.new("mpv_play_pause", None)
@@ -231,6 +251,10 @@ class MainWindow(Adw.ApplicationWindow):
         a_speed_up = Gio.SimpleAction.new("mpv_speed_up", None)
         a_speed_up.connect("activate", lambda *_: self._mpv_speed_delta(0.1))
         self.add_action(a_speed_up)
 
+        a_copy_ts = Gio.SimpleAction.new("mpv_copy_ts", None)
+        a_copy_ts.connect("activate", lambda *_: self._mpv_copy_ts())
+        self.add_action(a_copy_ts)
+
         a_stop = Gio.SimpleAction.new("stop_mpv", None)
         a_stop.connect("activate", lambda *_: self._mpv_stop())
         a_stop.set_enabled(False)  # only enabled when mpv running
@@ -246,6 +270,7 @@ class MainWindow(Adw.ApplicationWindow):
         app.set_accels_for_action("win.mpv_seek_back", ["J", "j"])
         app.set_accels_for_action("win.mpv_seek_fwd", ["L", "l"])
         app.set_accels_for_action("win.mpv_speed_down", ["minus", "KP_Subtract"])
         app.set_accels_for_action("win.mpv_speed_up", ["equal", "KP_Add"])
+        app.set_accels_for_action("win.mpv_copy_ts", ["T", "t"])
         app.set_accels_for_action("win.stop_mpv", ["X", "x"])
 
     def _install_shortcuts(self) -> None:
@@ -556,6 +581,7 @@ class MainWindow(Adw.ApplicationWindow):
             self._mpv_proc = proc
             self._mpv_ipc = ipc_path
             self._mpv_speed = 1.0
+            self._mpv_current_url = video.url
             self.ctrl_bar.set_visible(True)
             # Enable stop action (and implicitly other mpv actions if desired)
             try: self._act_stop_mpv.set_enabled(True)
             except Exception: pass
@@ -574,6 +600,33 @@ class MainWindow(Adw.ApplicationWindow):
         self.ctrl_bar.set_visible(False)
         try: self._act_stop_mpv.set_enabled(False)
         except Exception: pass
 
+    def _mpv_copy_ts(self) -> None:
+        if not self._mpv_ipc:
+            return
+        # Ask mpv for current playback position
+        pos = 0
+        try:
+            resp = mpv_send_cmd(self._mpv_ipc, ["get_property", "time-pos"])
+            if isinstance(resp, dict) and "data" in resp:
+                v = resp.get("data")
+                if isinstance(v, (int, float)):
+                    pos = int(v)
+        except Exception:
+            pos = 0
+        url = self._mpv_current_url or ""
+        if not url:
+            # Try to get from MPV path property as fallback
+            try:
+                resp2 = mpv_send_cmd(self._mpv_ipc, ["get_property", "path"])
+                if isinstance(resp2, dict) and isinstance(resp2.get("data"), str):
+                    url = str(resp2["data"])
+            except Exception:
+                pass
+        if not url:
+            return
+        sep = "&" if "?" in url else "?"
+        stamped = f"{url}{sep}t={pos}s"
+        try:
+            disp = Gdk.Display.get_default()
+            if disp:
+                disp.get_clipboard().set_text(stamped)
+        except Exception:
+            pass
+        self._show_toast(f"Copied URL at {pos}s")
+
     def _mpv_cookie_arg(self) -> str:
         browser = (self.settings.get("mpv_cookies_browser") or "").strip()
         if not browser:
             return ""
diff --git a/src/whirltube/download_manager.py b/src/whirltube/download_manager.py
index a63dc6c..6f0fdb9 100644
--- a/src/whirltube/download_manager.py
+++ b/src/whirltube/download_manager.py
@@ -20,6 +20,7 @@ from .download_history import add_download
 log = logging.getLogger(__name__)
 
 def _notify(summary: str) -> None:
     # Best-effort desktop notification without requiring GI at import time.
@@ -33,9 +34,11 @@ def _notify(summary: str) -> None:
     except Exception:
         pass
 
 class DownloadRow(Gtk.Box):
-    def __init__(self, task: Any | None = None, title: str | None = None, on_cancel: Callable[[], None] | None = None, on_retry: Callable[[], None] | None = None, on_remove: Callable[[], None] | None = None) -> None:
+    def __init__(self, task: Any | None = None, title: str | None = None, on_cancel: Callable[[], None] | None = None, on_retry: Callable[[], None] | None = None, on_remove: Callable[[], None] | None = None) -> None:
         super().__init__(orientation=Gtk.Orientation.VERTICAL, spacing=6)
         self.task = task
         self._base_title = title or getattr(getattr(task, "video", None), "title", "Download")
         self._on_cancel = on_cancel
         self._on_retry = on_retry
         self._on_remove = on_remove
@@ -52,12 +55,16 @@ class DownloadRow(Gtk.Box):
         self.btn_remove = Gtk.Button(label="Remove")
         self.btn_remove.set_sensitive(False)
         self.btn_remove.connect("clicked", lambda *_: self._on_remove_clicked())
         self.btn_open_folder = Gtk.Button(label="Open folder")
         self.btn_open_folder.set_sensitive(False)
         self.btn_open_folder.connect("clicked", self._open_folder)
+        self.btn_show_containing = Gtk.Button(label="Show in folder")
+        self.btn_show_containing.set_sensitive(False)
+        self.btn_show_containing.connect("clicked", self._show_in_folder)
         self.btn_open_file = Gtk.Button(label="Open file")
         self.btn_open_file.set_sensitive(False)
         self.btn_open_file.connect("clicked", self._open_file)
 
         self.actions.append(self.btn_cancel)
         self.actions.append(self.btn_retry)
         self.actions.append(self.btn_remove)
         self.actions.append(self.btn_open_folder)
+        self.actions.append(self.btn_show_containing)
         self.actions.append(self.btn_open_file)
 
         self.append(self.label)
         self.append(self.progress)
         self.append(self.status)
@@ -113,6 +120,27 @@ class DownloadRow(Gtk.Box):
         except Exception:
             pass
 
+    def _show_in_folder(self, *_a) -> None:
+        try:
+            p: DownloadProgress = getattr(self.task, "progress", None)
+            if p and p.filename:
+                fp = Path(p.filename)
+                # If not absolute, try resolve against dest_dir
+                dest: Path = getattr(self.task, "dest_dir", None)
+                if not fp.is_absolute() and isinstance(dest, Path):
+                    fp = dest / fp
+                parent = fp.parent
+                if parent.exists():
+                    Gio.AppInfo.launch_default_for_uri(f"file://{parent}", None)
+        except Exception:
+            pass
+
     def mark_cancelled(self) -> None:
         try:
             self.label.set_text(f"Cancelled: {self._base_title}")
             self.status.set_text("Cancelled")
             self.progress.set_fraction(0.0)
             self.progress.set_text("")
             self.btn_cancel.set_sensitive(False)
             # Keep folder/file buttons disabled
             self.btn_retry.set_sensitive(True)
             self.btn_remove.set_sensitive(True)
             self._state = "cancelled"
         except Exception:
             pass
@@ -155,11 +183,13 @@ class DownloadManager:
     def __init__(self, downloads_box: Gtk.Box, show_downloads_view: Callable[[], None], get_setting: Callable[[str], str|bool|int|None], show_error: Callable[[str], None], show_toast: Callable[[str], None] | None = None) -> None:
         self.downloads_box = downloads_box
         self.show_downloads_view = show_downloads_view
         self.get_setting = get_setting
         self.show_error = show_error
+        self.show_toast = show_toast or (lambda _s: None)
         self.download_dir: Path | None = None # This will be set by MainWindow
         self._max_concurrent: int = 3
         self._active: int = 0
         # queue of (video, opts, dest_dir, row)
         self._queue: list[tuple[Video, DownloadOptions, Path, DownloadRow]] = []
         self._rows: list[DownloadRow] = []
@@ -339,6 +369,7 @@ class DownloadManager:
                         if p.status == "finished":
                             try:
                                 add_download(video, dest_dir, p.filename)
                             except Exception:
                                 pass
                             _notify(f"Downloaded: {video.title}")
+                            self.show_toast(f"Downloaded: {video.title}")
                         elif p.status == "error":
                             _notify(f"Download failed: {video.title}")
+                            self.show_toast(f"Download failed: {video.title}")
                     finally:
                         self._active = max(0, self._active - 1)
                         self._maybe_start_next()
                     return False
                 GLib.idle_add(_done)
diff --git a/data/org.whirltube.WhirlTube.desktop b/data/org.whirltube.WhirlTube.desktop
new file mode 100644
index 0000000..fd68d3a
--- /dev/null
+++ b/data/org.whirltube.WhirlTube.desktop
@@ -0,0 +1,12 @@
+[Desktop Entry]
+Name=WhirlTube
+GenericName=YouTube client
+Comment=Lightweight GTK4 frontend for YouTube using mpv and yt-dlp
+Exec=whirltube
+Terminal=false
+Type=Application
+Icon=whirltube
+Categories=AudioVideo;Video;Network;
+StartupNotify=true
+Keywords=YouTube;Video;MPV;yt-dlp;
+DBusActivatable=false
diff --git a/data/org.whirltube.WhirlTube.metainfo.xml b/data/org.whirltube.WhirlTube.metainfo.xml
new file mode 100644
index 0000000..decc9f1
--- /dev/null
+++ b/data/org.whirltube.WhirlTube.metainfo.xml
@@ -0,0 +1,37 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<component type="desktop-application">
+  <id>org.whirltube.WhirlTube</id>
+  <name>WhirlTube</name>
+  <summary>Lightweight GTK4 frontend for YouTube using mpv and yt-dlp</summary>
+  <metadata_license>CC0-1.0</metadata_license>
+  <project_license>GPL-3.0-or-later</project_license>
+  <description>
+    <p>WhirlTube is a lightweight GTK4 frontend for YouTube that uses mpv for playback and yt-dlp for searching and downloading.</p>
+  </description>
+  <launchable type="desktop-id">org.whirltube.WhirlTube.desktop</launchable>
+  <categories>
+    <category>AudioVideo</category>
+    <category>Video</category>
+    <category>Network</category>
+  </categories>
+  <provides>
+    <binary>whirltube</binary>
+  </provides>
+  <url type="homepage">https://github.com/whirltube/whirltube</url>
+  <url type="bugtracker">https://github.com/whirltube/whirltube/issues</url>
+  <developer_name>WhirlTube contributors</developer_name>
+  <releases>
+    <release version="0.4.4">
+      <description>
+        <p>See CHANGELOG in repository.</p>
+      </description>
+    </release>
+  </releases>
+</component>
diff --git a/flatpak/org.whirltube.WhirlTube.yml b/flatpak/org.whirltube.WhirlTube.yml
new file mode 100644
index 0000000..0f1b5d1
--- /dev/null
+++ b/flatpak/org.whirltube.WhirlTube.yml
@@ -0,0 +1,64 @@
+app-id: org.whirltube.WhirlTube
+runtime: org.gnome.Platform
+runtime-version: '46'
+sdk: org.gnome.Sdk
+command: whirltube
+finish-args:
+  - --share=network
+  - --socket=x11
+  - --socket=wayland
+  - --filesystem=home
+  - --talk-name=org.freedesktop.secrets
+modules:
+  - name: python3-deps
+    buildsystem: simple
+    build-commands:
+      - pip3 install --no-cache --prefix=/app httpx yt-dlp
+  - name: whirltube
+    buildsystem: simple
+    build-commands:
+      - pip3 install --no-cache --prefix=/app .
+    sources:
+      - type: dir
+        path: ..