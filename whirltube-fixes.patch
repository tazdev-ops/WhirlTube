diff --git a/src/whirltube/provider.py b/src/whirltube/provider.py
index 32aa3a0..0000000 100644
--- a/src/whirltube/provider.py
+++ b/src/whirltube/provider.py
 @@ -1,12 +1,13 @@
 from __future__ import annotations
 
 import logging
-from collections.abc import Iterable
+import datetime
+import time
 
 from yt_dlp import YoutubeDL
 
 from .models import Video
 
 log = logging.getLogger(__name__)
 
 _BASE_OPTS = {
diff --git a/src/whirltube/window.py b/src/whirltube/window.py
index 4c6b6bc..0000000 100644
--- a/src/whirltube/window.py
+++ b/src/whirltube/window.py
 @@ -312,6 +312,18 @@ class MainWindow(Adw.ApplicationWindow):
         dlh = Gio.SimpleAction.new("download_history", None)
         dlh.connect("activate", self._on_download_history)
         self.add_action(dlh)
+
+        # Subscriptions actions (menu entries exist, actions were missing)
+        subs = Gio.SimpleAction.new("subscriptions", None)
+        subs.connect("activate", self._on_subscriptions)
+        self.add_action(subs)
+
+        subs_import = Gio.SimpleAction.new("subs_import", None)
+        subs_import.connect("activate", self._on_subs_import)
+        self.add_action(subs_import)
+
+        subs_export = Gio.SimpleAction.new("subs_export", None)
+        subs_export.connect("activate", self._on_subs_export)
 
     def _show_loading(self, message: str) -> None:
         # Clear results and show a centered spinner + message
 @@ -408,6 +420,7 @@ class MainWindow(Adw.ApplicationWindow):
                 on_related=self._on_related,
                 on_comments=self._on_comments,
                 thumb_loader_pool=self._thumb_loader_pool,
+                http_proxy=(self.settings.get("http_proxy") or None),
                 on_follow=self._follow_channel,
                 on_unfollow=self._unfollow_channel,
                 followed=is_followed(v.url) if v.kind == "channel" else False,
 @@ -653,6 +666,7 @@ class ResultRow(Gtk.Box):
         on_related: Callable[[Video], None],
         on_comments: Callable[[Video], None],
         thumb_loader_pool: ThreadPoolExecutor,
+        http_proxy: str | None = None,
         on_follow: Callable[[Video], None] | None = None,
         on_unfollow: Callable[[Video], None] | None = None,
         followed: bool = False,
 @@ -669,7 +683,7 @@ class ResultRow(Gtk.Box):
         self.on_unfollow = on_unfollow
         self._followed = followed
-        self._http_proxy = http_proxy
+        self._http_proxy = http_proxy
 
         self.set_margin_top(6)
         self.set_margin_bottom(6)
diff --git a/src/whirltube/player.py b/src/whirltube/player.py
index 71a8d49..0000000 100644
--- a/src/whirltube/player.py
+++ b/src/whirltube/player.py
 @@ -56,9 +56,7 @@ def mpv_send_cmd(ipc_path: str, command: list) -> dict | None:
             try:
                 data = s.recv(4096)
                 if data:
                     return json.loads(data.decode("utf-8", "ignore"))
             except Exception:
                 return None
-            except Exception:
-                return None
     except Exception:
         return None
     return None
diff --git a/src/whirltube/ytdlp_runner.py b/src/whirltube/ytdlp_runner.py
index 0d1b8d2..0000000 100644
--- a/src/whirltube/ytdlp_runner.py
+++ b/src/whirltube/ytdlp_runner.py
 @@ -49,7 +49,7 @@ class YtDlpRunner:
         self._proc: subprocess.Popen | None = None
         self._q: Queue[str] = Queue()
 
     def is_running(self) -> bool:
-        return self._proc is not None
+        return self._proc is not None and self._proc.poll() is None
 
     def start(self, args: list[str], bin_path: str | None = None) -> bool:
         self.stop()
diff --git a/src/whirltube/invidious_provider.py b/src/whirltube/invidious_provider.py
index 5e5ac87..0000000 100644
--- a/src/whirltube/invidious_provider.py
+++ b/src/whirltube/invidious_provider.py
 @@ -3,7 +3,6 @@ from __future__ import annotations
 import logging
 import time
 from collections.abc import Iterable
 from dataclasses import dataclass
 from typing import Any
 @@ -56,7 +55,7 @@ class InvidiousProvider:
             r = self._client.get(f"{self.cfg.base}/api/v1/search", params=params)
             r.raise_for_status()
             data = r.json()
-            items: Iterable[dict] = data if isinstance(data, list) else []
+            items: list[dict] = data if isinstance(data, list) else []
         except Exception as e:
             log.debug("Invidious search failed (%s); fallback to yt-dlp", e)
             # Fallback to yt-dlp provider with same filters
 @@ -124,7 +123,7 @@ class InvidiousProvider:
             r = self._client.get(f"{self.cfg.base}/api/v1/channels/{cid}/videos", params={"page": 1})
             r.raise_for_status()
             data = r.json()
-            items: Iterable[dict] = data.get("videos") if isinstance(data, dict) else []
+            items: list[dict] = data.get("videos") if isinstance(data, dict) else []
         except Exception as e:
             log.debug("Invidious channel_tab failed (%s); fallback to yt-dlp", e)
             return self._fallback.channel_tab(chan_url, tab=tab)
