diff --git a/src/whirltube/window.py b/src/whirltube/window.py
index 706a8bb..28e22b9 100644
--- a/src/whirltube/window.py
+++ b/src/whirltube/window.py
@@ -107,6 +107,7 @@ class MainWindow(Adw.ApplicationWindow):
         menu.append("Export Subscriptions…", "win.subs_export")
         menu.append("Keyboard Shortcuts", "win.shortcuts")
         menu.append("Download History", "win.download_history")
         menu.append("Cancel All Downloads", "win.cancel_all_downloads")
         menu.append("Clear Finished Downloads", "win.clear_finished_downloads")
+        menu.append("Stop MPV", "win.stop_mpv")
         menu.append("Quit", "app.quit")
         menu_btn = Gtk.MenuButton(icon_name="open-menu-symbolic")
         menu_btn.set_menu_model(menu)
         header.pack_start(menu_btn)
@@ -180,7 +181,7 @@ class MainWindow(Adw.ApplicationWindow):
         self._filters_load_from_settings()
         btn_clear.connect("clicked", self._filters_clear)
         btn_apply.connect("clicked", self._filters_apply)
 
-        # Downloads toggle
+        # Downloads toggle (quick navigation)
         self.downloads_button = Gtk.Button(label="Downloads")
         self.downloads_button.connect("clicked", self._show_downloads)
         header.pack_end(self.downloads_button)
@@ -194,12 +195,24 @@ class MainWindow(Adw.ApplicationWindow):
         results_scroll.set_child(self.results_box)
         self.stack.add_titled(results_scroll, "results", "Results")
 
         # Downloads
-        self.downloads_box = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=8)
-        self._set_margins(self.downloads_box, 8)
-        downloads_scroll = Gtk.ScrolledWindow(vexpand=True)
-        downloads_scroll.set_child(self.downloads_box)
-        self.stack.add_titled(downloads_scroll, "downloads", "Downloads")
+        downloads_page = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=6)
+        self._set_margins(downloads_page, 8)
+        # Header row with "Open download directory"
+        dl_hdr = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=6)
+        self.btn_open_dl_dir = Gtk.Button(label="Open download directory")
+        self.btn_open_dl_dir.set_tooltip_text("Open current download directory")
+        self.btn_open_dl_dir.connect("clicked", self._open_download_dir)
+        dl_hdr.append(self.btn_open_dl_dir)
+        dl_hdr.append(Gtk.Label(label="", hexpand=True))  # spacer
+        downloads_page.append(dl_hdr)
+        # Scroll with list
+        self.downloads_box = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=8)
+        downloads_scroll = Gtk.ScrolledWindow(vexpand=True)
+        downloads_scroll.set_child(self.downloads_box)
+        downloads_page.append(downloads_scroll)
+        # Add as stack page
+        self.stack.add_titled(downloads_page, "downloads", "Downloads")
 
         # Player (embedded mpv)
         self.player_box = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=0)
         self._set_margins(self.player_box, 0)
         self.mpv_widget = MpvWidget()
@@ -225,6 +238,50 @@ class MainWindow(Adw.ApplicationWindow):
         self._set_welcome()
         self._install_shortcuts()
 
+        # MPV actions (menu + hotkeys)
+        self._install_mpv_actions()
+
         # MPV external player state
         self._mpv_proc = None
         self._mpv_ipc = None
         self._mpv_speed = 1.0
 
         # Save settings on window close
         self.connect("close-request", self._on_main_close)
 
+    def _install_mpv_actions(self) -> None:
+        # Define actions
+        a_play_pause = Gio.SimpleAction.new("mpv_play_pause", None)
+        a_play_pause.connect("activate", lambda *_: self._mpv_cycle_pause())
+        self.add_action(a_play_pause)
+
+        a_seek_back = Gio.SimpleAction.new("mpv_seek_back", None)
+        a_seek_back.connect("activate", lambda *_: self._mpv_seek(-10))
+        self.add_action(a_seek_back)
+
+        a_seek_fwd = Gio.SimpleAction.new("mpv_seek_fwd", None)
+        a_seek_fwd.connect("activate", lambda *_: self._mpv_seek(10))
+        self.add_action(a_seek_fwd)
+
+        a_speed_down = Gio.SimpleAction.new("mpv_speed_down", None)
+        a_speed_down.connect("activate", lambda *_: self._mpv_speed_delta(-0.1))
+        self.add_action(a_speed_down)
+
+        a_speed_up = Gio.SimpleAction.new("mpv_speed_up", None)
+        a_speed_up.connect("activate", lambda *_: self._mpv_speed_delta(0.1))
+        self.add_action(a_speed_up)
+
+        a_stop = Gio.SimpleAction.new("stop_mpv", None)
+        a_stop.connect("activate", lambda *_: self._mpv_stop())
+        a_stop.set_enabled(False)  # only enabled when mpv running
+        self.add_action(a_stop)
+        self._act_stop_mpv = a_stop
+
+        # Install accelerators
+        app = self.get_application()
+        if not app:
+            return
+        # YouTube-like keys: j/k/l and +/- for speed, x to stop
+        app.set_accels_for_action("win.mpv_play_pause", ["K", "k"])
+        app.set_accels_for_action("win.mpv_seek_back", ["J", "j"])
+        app.set_accels_for_action("win.mpv_seek_fwd", ["L", "l"])
+        app.set_accels_for_action("win.mpv_speed_down", ["minus", "KP_Subtract"])
+        app.set_accels_for_action("win.mpv_speed_up", ["equal", "KP_Add"])
+        app.set_accels_for_action("win.stop_mpv", ["X", "x"])
+
     def _install_shortcuts(self) -> None:
         # Add a "go-back" action with common shortcuts.
         go_back = Gio.SimpleAction.new("go-back", None)
@@ -248,13 +305,16 @@ class MainWindow(Adw.ApplicationWindow):
         grp_search.append(Gtk.ShortcutsShortcut(title="Run search", accelerator="Return"))
         # Player/MPV controls (external; via control bar)
-        grp_play = Gtk.ShortcutsGroup(title="MPV Controls (when visible)")
-        grp_play.append(Gtk.ShortcutsShortcut(title="Seek backward 10s", accelerator="button"))
-        grp_play.append(Gtk.ShortcutsShortcut(title="Play/Pause", accelerator="button"))
-        grp_play.append(Gtk.ShortcutsShortcut(title="Seek forward 10s", accelerator="button"))
-        grp_play.append(Gtk.ShortcutsShortcut(title="Speed - / +", accelerator="button"))
-        grp_play.append(Gtk.ShortcutsShortcut(title="Stop", accelerator="button"))
+        grp_play = Gtk.ShortcutsGroup(title="MPV Controls")
+        grp_play.append(Gtk.ShortcutsShortcut(title="Play/Pause", accelerator="K"))
+        grp_play.append(Gtk.ShortcutsShortcut(title="Seek backward 10s", accelerator="J"))
+        grp_play.append(Gtk.ShortcutsShortcut(title="Seek forward 10s", accelerator="L"))
+        grp_play.append(Gtk.ShortcutsShortcut(title="Speed down", accelerator="-"))
+        grp_play.append(Gtk.ShortcutsShortcut(title="Speed up", accelerator="="))
+        grp_play.append(Gtk.ShortcutsShortcut(title="Stop", accelerator="X"))
         # Assemble
         sec.append(grp_nav)
         sec.append(grp_app)
         sec.append(grp_search)
         sec.append(grp_play)
         win.add(sec)
         win.present()
@@ -282,6 +342,7 @@ class MainWindow(Adw.ApplicationWindow):
                 self.download_dir = Path(new_dir)
                 self.download_manager.set_download_dir(self.download_dir)
+                # Update header button (no-op if unchanged)
+                # Nothing else required; handler uses current self.download_dir
             # Reconfigure provider: Invidious vs yt-dlp
             proxy = (self.settings.get("http_proxy") or "").strip() or None
             use_invid = bool(self.settings.get("use_invidious"))
             invid_base = (self.settings.get("invidious_instance") or "https://yewtu.be").strip()
@@ -482,6 +543,14 @@ class MainWindow(Adw.ApplicationWindow):
         self.navigation_controller.show_view("downloads")
 
+    def _open_download_dir(self, *_a) -> None:
+        try:
+            p = self.download_dir
+            if isinstance(p, Path):
+                Gio.AppInfo.launch_default_for_uri(f"file://{p}", None)
+        except Exception:
+            pass
+
     def _on_feed(self, *_a) -> None:
         # Show loading, then fetch recent uploads from each followed channel
         self._show_loading("Loading feed…")
@@ -584,6 +653,8 @@ class MainWindow(Adw.ApplicationWindow):
             self._mpv_proc = proc
             self._mpv_ipc = ipc_path
             self._mpv_speed = 1.0
             self.ctrl_bar.set_visible(True)
+            # Enable stop action (and implicitly other mpv actions if desired)
+            try: self._act_stop_mpv.set_enabled(True)
+            except Exception: pass
 
             # Watcher thread: hide controls on exit
             def _watch():
                 try:
                     proc.wait()
@@ -597,6 +668,8 @@ class MainWindow(Adw.ApplicationWindow):
     def _on_mpv_exit(self) -> None:
         self._mpv_proc = None
         self._mpv_ipc = None
         self.ctrl_bar.set_visible(False)
+        try: self._act_stop_mpv.set_enabled(False)
+        except Exception: pass
 
     def _mpv_cookie_arg(self) -> str:
         browser = (self.settings.get("mpv_cookies_browser") or "").strip()
         if not browser:
             return ""
diff --git a/src/whirltube/download_manager.py b/src/whirltube/download_manager.py
index a946b36..a63dc6c 100644
--- a/src/whirltube/download_manager.py
+++ b/src/whirltube/download_manager.py
@@ -21,6 +21,17 @@ from .download_history import add_download
 
 log = logging.getLogger(__name__)
 
+def _notify(summary: str) -> None:
+    # Best-effort desktop notification without requiring GI at import time.
+    try:
+        import gi
+        gi.require_version("Notify", "0.7")
+        from gi.repository import Notify
+        Notify.init("whirltube")
+        n = Notify.Notification.new(summary)
+        n.show()
+    except Exception:
+        pass
+
 class DownloadRow(Gtk.Box):
     def __init__(self, task: Any | None = None, title: str | None = None, on_cancel: Callable[[], None] | None = None, on_retry: Callable[[], None] | None = None, on_remove: Callable[[], None] | None = None) -> None:
         super().__init__(orientation=Gtk.Orientation.VERTICAL, spacing=6)
@@ -361,6 +372,8 @@ class DownloadManager:
                     try:
                         if p.status == "finished":
                             try:
                                 add_download(video, dest_dir, p.filename)
                             except Exception:
                                 pass
+                            _notify(f"Downloaded: {video.title}")
+                        elif p.status == "error":
+                            _notify(f"Download failed: {video.title}")
                     finally:
                         self._active = max(0, self._active - 1)
                         self._maybe_start_next()
                     return False
                 GLib.idle_add(_done)
@@ -406,6 +419,8 @@ class DownloadManager:
         row.attach_task(dl_task)
         row._on_cancel = lambda: self._cancel_row(row)  # type: ignore[attr-defined]
         dl_task.start(_on_update)
         return