diff --git a/src/whirltube/util.py b/src/whirltube/util.py
index a2b5421..a35cd37 100644
--- a/src/whirltube/util.py
+++ b/src/whirltube/util.py
@@ -1,10 +1,11 @@
 from __future__ import annotations
 
 import json
 import os
 from pathlib import Path
-from typing import Any
+from typing import Any, Iterable
 from urllib.parse import urlparse
 
 
 APP_NAME = "whirltube"
 
@@ -61,3 +62,33 @@ def safe_httpx_proxy(val: str | None) -> str | None:
     if scheme in {"http", "https", "socks4", "socks5", "socks5h"} and (u.netloc or u.path):
         return s
     return None
+
+def is_valid_youtube_url(url: str, allowed_hosts: Iterable[str] | None = None) -> bool:
+    """
+    Return True if the URL is http(s) and points to YouTube/YouTu.be or an explicitly
+    allowed host (e.g., an Invidious instance). This is a light validation to help
+    users avoid pasting arbitrary or unsupported URLs into "Open URLâ€¦".
+    """
+    if not url or not isinstance(url, str):
+        return False
+    try:
+        u = urlparse(url.strip())
+    except Exception:
+        return False
+    if (u.scheme or "").lower() not in {"http", "https"}:
+        return False
+    host = (u.hostname or "").lower().strip()
+    if not host:
+        return False
+    # Core YouTube hosts
+    if host.endswith("youtube.com") or host == "youtu.be":
+        return True
+    # Extra allowed hosts (e.g., Invidious)
+    if allowed_hosts:
+        host_set = {h.lower().strip() for h in allowed_hosts if isinstance(h, str) and h.strip()}
+        # Exact hostname match
+        if host in host_set:
+            return True
+    return False
diff --git a/src/whirltube/window.py b/src/whirltube/window.py
index b9c3cf9..ac9f5f8 100644
--- a/src/whirltube/window.py
+++ b/src/whirltube/window.py
@@ -14,6 +14,7 @@ import secrets
 import threading
 from concurrent.futures import ThreadPoolExecutor
 from collections.abc import Callable
+from urllib.parse import urlparse
 from pathlib import Path
 
 import gi
@@ -35,7 +36,7 @@ from .download_manager import DownloadManager
 from .search_filters import normalize_search_filters
 from .navigation_controller import NavigationController
 from .download_history import list_downloads
 from .subscriptions import is_followed, add_subscription, remove_subscription, list_subscriptions, export_subscriptions, import_subscriptions
 from .quickdownload import QuickDownloadWindow
-from .util import load_settings, save_settings, xdg_data_dir, safe_httpx_proxy
+from .util import load_settings, save_settings, xdg_data_dir, safe_httpx_proxy, is_valid_youtube_url
 
 log = logging.getLogger(__name__)
 
@@ -179,6 +180,7 @@ class MainWindow(Adw.ApplicationWindow):
         dlg.present()
 
         def on_response(d: Gtk.Dialog, resp):
             try:
                 if resp == Gtk.ResponseType.OK:
                     url = entry.get_text().strip()
-                    if url:
-                        self._browse_url(url)
+                    if url:
+                        # Allow Invidious host when "use_invidious" is enabled
+                        extra = []
+                        if bool(self.settings.get("use_invidious")):
+                            host = urlparse((self.settings.get("invidious_instance") or "").strip()).hostname
+                            if host:
+                                extra.append(host)
+                        if not is_valid_youtube_url(url, extra):
+                            self._show_error("This doesn't look like a YouTube/Invidious URL.")
+                        else:
+                            self._browse_url(url)
             finally:
                 d.destroy()
 
         dlg.connect("response", on_response)
@@ -356,9 +358,10 @@ class MainWindow(Adw.ApplicationWindow):
         self.navigation_controller.clear_history()
         self._clear_results()
         self.results_box.append(_spacer(16))
         label = Gtk.Label(
             label="Type a search and press Enter.
Or click Open URL / Quick Download.",
             justify=Gtk.Justification.CENTER,
         )
-        label.set_xalign(0.5)
-        label.set_yalign(0.5)
+        # Center in both axes using GTK4 halign/valign
+        label.set_halign(Gtk.Align.CENTER)
+        label.set_valign(Gtk.Align.CENTER)
         self.results_box.append(label)
         self.navigation_controller.show_view("results")
@@ -760,7 +763,10 @@ class ResultRow(Gtk.Box):
         ph.set_halign(Gtk.Align.FILL)
         ph.set_valign(Gtk.Align.FILL)
-        lbl = Gtk.Label(label="No thumbnail", xalign=0.5, yalign=0.5)
+        lbl = Gtk.Label(label="No thumbnail")
+        # Center the placeholder label
+        lbl.set_halign(Gtk.Align.CENTER)
+        lbl.set_valign(Gtk.Align.CENTER)
         lbl.add_css_class("dim-label")
         lbl.set_wrap(True)
         ph.append(lbl)
         # Put the placeholder at the start (thumbnail slot)
         self.prepend(ph)
diff --git a/tests/test_utils_youtube_url.py b/tests/test_utils_youtube_url.py
new file mode 100644
index 0000000..c587ccf
--- /dev/null
+++ b/tests/test_utils_youtube_url.py
@@ -0,0 +1,26 @@
+from whirltube.util import is_valid_youtube_url
+
+
+def test_is_valid_youtube_url_basic_youtube():
+    assert is_valid_youtube_url("https://www.youtube.com/watch?v=dQw4w9WgXcQ")
+    assert is_valid_youtube_url("http://youtube.com/shorts/abc")
+    assert is_valid_youtube_url("https://youtu.be/dQw4w9WgXcQ")
+
+
+def test_is_valid_youtube_url_rejects_non_http():
+    assert not is_valid_youtube_url("ftp://youtube.com/video")
+    assert not is_valid_youtube_url("file:///tmp/thing")
+    assert not is_valid_youtube_url("not a url")
+    assert not is_valid_youtube_url("")
+    assert not is_valid_youtube_url(None)  # type: ignore[arg-type]
+
+
+def test_is_valid_youtube_url_allows_invidious_host():
+    assert not is_valid_youtube_url("https://yewtu.be/watch?v=foo")
+    assert is_valid_youtube_url("https://yewtu.be/watch?v=foo", allowed_hosts=["yewtu.be"])
+
+
+def test_is_valid_youtube_url_rejects_unknown_host():
+    assert not is_valid_youtube_url("https://example.com/watch?v=foo")
+    assert not is_valid_youtube_url("https://ex.youtube.evil.example/watch?v=foo")
+    assert not is_valid_youtube_url("https://you.tube.com/watch?v=foo")
