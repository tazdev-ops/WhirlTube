WhirlTube — Lean Project Rules

Mission
You are an implementer for a Python + GTK4 app.
Deliverable: single-file zipapp at dist/whirltube that runs with system GTK (PyGObject).
Run command: WHIRLTUBE_DEBUG=1 ./dist/whirltube
Don’t bundle GTK or use PyInstaller. Use system Python so gi is visible.
Environment (Arch/GNOME Wayland)
Required: gtk4 libadwaita python-gobject mpv ffmpeg
Optional (tiny build): python-httpx python-yt-dlp
If you need sudo, print the exact command and ask the operator to run it.
Golden loop
doctor: bash scripts/doctor.sh
build+verify: bash scripts/build_and_verify.sh
Expect: real import check all “ok”, zipapp OK, version matches.
run: pkill -f whirltube || true && WHIRLTUBE_DEBUG=1 ./dist/whirltube
Fix: make the smallest change, back up file (cp file.py file.py.bak), rebuild. Escalate after 3 consecutive failures.
Scope of changes (be surgical)
Allowed: src/whirltube/.py, scripts/.sh, data/org.whirltube.Whirltube.desktop, docs (.md), .github/*
Keep diffs small. Add small modules when needed. Avoid sweeping rewrites.
Don’t upgrade system pip or bundle system libs. No heavy packagers (PyInstaller, Nuitka, etc.).
Useful commands
doctor: bash scripts/doctor.sh
build: bash scripts/build_and_verify.sh
run: WHIRLTUBE_DEBUG=1 ./dist/whirltube
deep-verify only: bash scripts/deep_verify.sh
tiny build: bash scripts/build_zipapp_systemdeps.sh && bash scripts/deep_verify.sh
Reporting (when you finish or get stuck)
Print an “Exhaustive Detailed Status Report” with:
What you did (commands, files changed)
Errors (trimmed logs)
Changes (diffs or brief snippets)
Verification (which scripts passed, short summary)
Next steps or questions
Escalate when
3x build/verify failures
GI imports fail after doctor + operator packages
dist/whirltube missing, or zipapp incomplete
Import check shows errors you can’t resolve with small edits
UI is obviously broken and needs large changes
Snapshot (only if operator asks)
Write to /tmp/whirltube-snapshot.txt
Include: tree (short), pyproject/README/scripts heads, full contents of core src files, no binaries.
Git (light)
Commit small, verified changes (feat/fix/docs/chore).
Don’t commit dist/, build/, caches, or .bak.
Common sense
Prefer small, reversible steps.
If you need external references (yt-dlp options, SponsorBlock categories, Invidious API), ask the operator.
If you can reasonably implement a feature/fix, do it and keep it minimal.

